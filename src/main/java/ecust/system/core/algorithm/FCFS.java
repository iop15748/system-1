package ecust.system.core.algorithm;import ecust.system.core.metadata.PCB;import ecust.system.core.metadata.catalog.PCBStateEnum;import java.util.ArrayList;import java.util.Comparator;public class FCFS implements ProcessSchedulingAlgorithm {	private ArrayList<PCB> FCFSlist;	@Override	public void initialize(ArrayList<PCB> list) {		this.sortByCreate(this.FCFSlist);	}	@Override	public void schedule(int currentTime) {		for(int i = 0;i < this.FCFSlist.size();i++){			//  完成状态			if(this.FCFSlist.get(i).getState() == PCBStateEnum.FINISH){				continue;			}			//  执行状态			else if(this.FCFSlist.get(i).getState() == PCBStateEnum.RUNNING){				this.FCFSlist.get(i).setRanTime(this.FCFSlist.get(i).getRanTime()+1);				//   进程运行时间满足需求时间				if(this.FCFSlist.get(i).getRanTime() == this.FCFSlist.get(i).getRequiredTime() ){					this.FCFSlist.get(i).setState(PCBStateEnum.FINISH);					this.FCFSlist.get(i).setFinishTime(currentTime);				}				//   进程运行时间不满足需求时间				else {					break;				}			}			//   等待状态			else {				this.FCFSlist.get(i).setState(PCBStateEnum.RUNNING);				break;			}		}	}	@Override	public void disuse() {	}	// 按创建时间升序排序，时间相同按需求时间升序排序	public void sortByCreate(ArrayList<PCB> list) {		list.sort(new Comparator<PCB>() {			@Override			public int compare(PCB o1, PCB o2) {				int time = o1.getCreateTime()-o2.getCreateTime();				if(time > 0)					return 1;				else if(time == 0){					return o1.getRequiredTime() > o2.getRequiredTime() ? 1 : -1;				}else					return -1;			}		});	}}